TUNNING THE SIMULATION TIME

DWA PARAMETERS -
	
	Simulation time: time allowed for robot to move with the stamped velocities
	
	Takes the velocity samples in robot's control space, and examine the circular trajectories represented by those velocity samples and finally
	eleminate bad velocities.
	
	High simulation times (>=5) lead to heavier computation, and robot computes longer paths than needed, which may also perform better on
	performace compared to acceptable paths and hence chosen.
	
	Low simulation times (<=2)
		Limited performance, especially when robot needs to pass a narrow doorway or gap between furnitures, because there is insufficient time
		to obtain the optimal trajectory that actually goes through the narrow passway.

DEMO - EFFECT OF SIMULATION TIME
	export TURTLEBOT3_MODEL='waffle'
	roslaunch turtlebot3_gazebo turtlebot3_house.launch
	
	roscd turtlebot3_navigation/param
	ls
	# you'll see different dwa configuration files, each corresponds to certain version of turtlebot3
	# since we are using waffle robot in simulation,
	gedit dwa_local_planner_params_waffle.yaml
	
	# observe the value of the sim_time parameter, which is set to 2 by default.
	
	Send goal locatoins with RVIZ and observe the the yellow line (the local path planners chose trajectory)
	
	# change the value of the sim_time parameter to say 6.0 and repeat the simulation.
	close and reopen turtlebot3 gazebo simulation and turtlebot3 navigation stack.
	
	Observe now that the simulated trajectory is much longer since we have increased the simulation time. Ofcourse, simulating longer trajectories
	might be better for navigation performance (following the optimal path) but this induces heavier computations, which may take some time
	depending upon your hardware capabilities to compute.
	
	Also note that the trajectories generated by the local path planner do not necessarily coincide perfectly with the static path generated by 
	the global path planner but is usually very close to it.
	Also the static path generated by the global path planner keeps updating as the robot's position keeps changing, though these changes are
	miniscule, unless the robot faces an unforseen or dynamic obstacle- the static path is updated to a significantly different one.
