HOW VARIOUS TRAJECTORIES ARE EVALUATED IN DWA ALGORITHM.

The local path planner uses an objective function that determines which trajectories to chose among all of the generated trajectories.
The trajectory that optimizes the objective function is then selected as short term plan to follow.

The objective function used by DWA calculates cost of a trajectory as follows -
cost =   path_distance_bias * (distance(m) to static path from the endpoint of the trajectory)
	   + goal_distance_bias * (distance(m) to local goal from the endpoint of the trajectory)
	   + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

The local planner then selects the trajectory that has the minimum cost.
As seen above, the cost is the sum of three terms.

First term -
path_distance_bias * (distance(in meters) to static path from the endpoint of the trajectory) - self explanatory, how far the trajectory is
deviating from the static path generated by the global path planner.

goal_distance_bias * (distance(in meters) to local goal from the endpoint of the trajectory) - how far off the robot will stray from the local
goal

* distance to local goal and distance to static path are somewhat different values. I don't know which distance are they using to calculate
distance to path - tangent distance from the endpoint of trajectory, normal distance, shortest distance ...? I think the tangent distance should
be used if you're also using distance to local goal in the cost function. The tangent distance means the robot doesn't need to perform complex
or very less rotational motion and if that distance is low, that means it is easier for robot to follow the static path and also that the robot
is oriented correctly and positioned correctly at the end of the local trajectory.

The corresponding multipliers are weigths that penalizes for respective variables.
e.g. path_distance_bias is the weight that penalizes the trajectories that stray off very far from the static path. Increasing this weight will
make the local path planner favor those trajectories which are closer to the static path planner.

The occdist_scale is short for occlusion distance scale factor which specifies how much robot should try to avoid obstacles. Increasing this value
will lead the robot to select paths which are far from the obstacles, but too high of values may lead the robot to get stuck.


The above biases are represented with following parameter names-

	p_dist: path distance bias is the weight for how much the local planner should stay close to the global path

	g_dist: global distance bias is the weight for how much the robot should attempt to reach the local goal, with whatever path.

	occdist: it is a weight (in scale of 0 to 254) for how much the robot should attempt to avoid obstacles.
		A high value for this parameter results in indecisive robot that is stuck in place.
	
	
